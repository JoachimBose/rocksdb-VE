#!/usr/bin/bpftrace
// Define a map to store timestamps per thread
BEGIN {
    //@timestamps[tid] = perthread;
    
}
// Attach to the USDT probe

usdt:/home/user/rocksdb-VE/db_bench:posix:sqread,
usdt:/home/user/rocksdb-VE/db_bench:io_uring:sqread,
usdt:/home/user/rocksdb-VE/db_bench:io_uring_nv:sqread,
usdt:/home/user/rocksdb-VE/db_bench:libaio:sqread
{
    // Store the current timestamp in nanoseconds
    @lastTimeStampSQ = nsecs;
    @usedUpSQ = 0;
}

usdt:/home/user/rocksdb-VE/db_bench:io_uring:rdread,
usdt:/home/user/rocksdb-VE/db_bench:io_uring_nv:rdread,
usdt:/home/user/rocksdb-VE/db_bench:libaio:rdread,
usdt:/home/user/rocksdb-VE/db_bench:posix:rdread
{
    // Store the current timestamp in nanoseconds
    @lastTimeStampRD = nsecs;
    @usedUpRD = 0;
}

usdt:/home/user/rocksdb-VE/db_bench:io_uring:write,
usdt:/home/user/rocksdb-VE/db_bench:io_uring_nv:write,
usdt:/home/user/rocksdb-VE/db_bench:libaio:write,
usdt:/home/user/rocksdb-VE/db_bench:posix:write
{
    // Store the current timestamp in nanoseconds
    @lastTimeStampWR = nsecs;
    @usedUpWR = 0;
}


// Attach to the sys_enter_read tracepoint
//tracepoint:syscalls:sys_enter_write //works only for posix
//kprobe:vfs_write { //works only for posix
//kprobe:io_write { //works only for io_uring
//kprobe:ext4_file_write_iter { //works for both, but has massive slowdown for io_uring
kprobe:rw_verify_area { //works for both, but has massive slowdown for io_uring
//kprobe:io_rw_init_file { //works for io_uring only, but is fast (kretprobe also fast)
//kprobe:io_setup_async_rw { //works for io_uring posix not tested, but both kprobe and kretprobes are fast
//kretprobe:io_write { //KRETPROBE IS FAST
//kprobe:ext4_file_write_iter {
//tracepoint:syscalls:sys_enter_io_uring_enter {
    // Check if we have a stored timestamp for this thread
    if (@usedUpWR == 0) {
        // Calculate the time difference
        $delta = nsecs - @lastTimeStampWR;
        //@deltaHist = lhist($delta, 512, 3000, 50);
        @deltaHistWR = hist($delta);
        
        // Print the time difference
        //printf("Time difference for thread %d: %d ns in process: %s\n", tid, $delta, comm);
        //printf("%s\n", kstack);

        // Clear the timestamp for this thread
        @usedUpWR = 1;
    }
    if (@usedUpSQ == 0) {
        // Calculate the time difference
        $delta = nsecs - @lastTimeStampSQ;
        //@deltaHist = lhist($delta, 512, 3000, 50);
        @deltaHistSQ = hist($delta);
        
        // Print the time difference
        //printf("Time difference for thread %d: %d ns in process: %s\n", tid, $delta, comm);
        //printf("%s\n", kstack);

        // Clear the timestamp for this thread
        @usedUpSQ = 1;
    }
    if (@usedUpRD == 0) {
        // Calculate the time difference
        $delta = nsecs - @lastTimeStampRD;
        //@deltaHist = lhist($delta, 512, 3000, 50);
        @deltaHistRD = hist($delta);
        
        // Print the time difference
        //printf("Time difference for thread %d: %d ns in process: %s\n", tid, $delta, comm);
        //printf("%s\n", kstack);

        // Clear the timestamp for this thread
        @usedUpRD = 1;
    }
}